/*
Самый результативный матч по количеству голов. Выведите в модальном окне через alert() сообщение 
“Самый результативный матч был под номером number. В нем было забито numberOfGoals гол(ов).” 
(замените number на порядковый номер матча, а numberOfGoals - на количество голов в самом результативном матче). 
Если самых результативных матчей несколько, то выведите первый из них.

Самые не результативные игры. В массиве нужно найти все самые не результативные игры (все матчи, у которых количество 
голов между собой совпадает и является минимальным). В данном массиве goals это будут 2 матча под номерами 2 и 3 с количеством 
голов по 1. Выведите через alert() сообщение “Самые не результативные матчи были под номерами numbers. В каждом из них было 
забито по numberOfGoals мячу(а).” (замените numbers на порядковые номера матчей и отобразите их через запятую, 
  а numberOfGoals - на количество голов в самом не результативном матче). Не берите в учет игры с автоматическим поражением.
Общее количество голов за сезон. Не берите в учет игры с автоматическим поражением. Выведите сообщение через alert() 
“Общее количество голов за сезон равно numberOfGoals” (замените numberOfGoals на число общее количества голов за сезон).
Были ли автоматические поражения. Если были, то выведите сообщение через alert() “Были автоматические поражения: да”, 
иначе “Были автоматические поражения: нет”.
Среднее количество голов за матч. Выведите сообщение через alert() “Среднее количество голов за матч равно numberOfGoals” 
(замените numberOfGoals на среднее количество голов за матч).
Отсортируйте голы в порядке возрастания и выведите все результаты через запятую в модальном окне alert(). Массив goals не должен 
быть изменен.
*/
const goals = [8, 1, 1, 3, 2, -1, 5];
const filtredGoals = [];

///////////////////////////////////
//Были ли автоматические поражения
const autoDefeat = goals.includes(-1);
const autoDefeatAnswer = !autoDefeat ? "нет" : "да";
console.log(`Были автоматические поражения: ${autoDefeatAnswer}`);

// Убираем автоматические поражения, так как они не нужны для подсчетов
if (autoDefeat) {
  filtredGoals.push(
    ...goals.filter((game) => {
      return game > -1;
    })
  );
} else {
  filtredGoals.push(...goals);
}
// Ищем максимальное и минимальное количество голов
const maxGameGoals = Math.max(...filtredGoals);
const minGameGoals = Math.min(...filtredGoals);

////////////////////////////////
//Самый результативный матч по количеству голов
const maxGameGoalsIndex =
  goals.findIndex((game) => {
    return game === maxGameGoals;
  }) + 1;

console.log(
  `Самый результативный матч был под номером ${maxGameGoalsIndex}. В нем было забито ${maxGameGoals} гол(ов).`
);

////////////////////////////////
// Самые не результативные игры.
const minGameGoalsIndex = [];
goals.forEach((game, index) => {
  if (game === minGameGoals) {
    minGameGoalsIndex.push(index + 1);
  }
});
console.log(
  `Самые не результативные матчи были под номерами ${minGameGoalsIndex.join(
    ", "
  )}. В каждом из них было забито по ${minGameGoals} мячу(а).`
);

////////////////////////////////
// Общее количество голов за сезон.
const totalGoals = filtredGoals.reduce((sum, qtty) => {
  if (qtty > -1) {
    return (sum += qtty);
  }
  return sum;
}, 0);
console.log(`Общее количество голов за сезон равно ${totalGoals}`);

////////////////////////////////
//Среднее количество голов за матч
const averageNumberOfGoals = totalGoals / filtredGoals.length;
console.log(
  `Среднее количество голов за матч равно ${averageNumberOfGoals.toFixed(2)}`
);
// alert(`Среднее количество голов за матч равно ${numberOfGoals}`);
